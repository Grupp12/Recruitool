package se.kth.grupp12.recruitool.view;

import se.kth.grupp12.recruitool.controller.Controller;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import java.io.Serializable;
import javax.ejb.EJB;
import se.kth.grupp12.recruitool.integration.EntityExistsException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import se.kth.grupp12.recruitool.model.AccountDTO;
import se.kth.grupp12.recruitool.model.Competence;
import se.kth.grupp12.recruitool.model.pdf.ApplicationPDF;

/**
 * View class to be used by JSF. Handles basic view logic and calls the
 * controller to perform application operations.
 */
@Named("myView")
@SessionScoped
public class View implements Serializable {

	@EJB
	private Controller controller;

	private AccountDTO account;

	private RegisterForm registerForm = new RegisterForm();
	private ApplicationForm applicationForm = new ApplicationForm();
	private String formMessage;

	/**
	 * Returns the object representing the register form.
	 *
	 * @return the register form object.
	 */
	public RegisterForm getRegisterForm() {
		return registerForm;
	}
	
	/**
	 * Registers a new account with the data currently in the register form 
	 * and resets the form.
	 *
	 * @return the result with value unhandledError if error occurred else a
	 * empty string. Error page will be shown if return value is unhandledError.
	 */
	public String register() {
		String result;
		formMessage = null;
		try {
			controller.register(registerForm);
			result = "submitapplication.xhtml?faces-redirect=true";

			formMessage = "Your account has been created!";

			registerForm = new RegisterForm();
		}
		catch (Throwable ex) {
			result = handleException(ex);
		}
		return result;
	}
	
	/**
	 * Returns the object representing the application form.
	 *
	 * @return the application form object.
	 */
	public ApplicationForm getApplicationForm() {
		return applicationForm;
	}
	

	/**
	 * Create a new application with the data currently in the application form
	 * and the account that is logged in.
	 */
	public String submitApplication() {
		String result = "";
		try {
			tryLogin();
			controller.submitApplication(applicationForm, account);
			formMessage = "Application submitted";
			applicationForm = new ApplicationForm();
		}
		catch (Throwable ex) {
			result = handleException(ex);
		}
		
		return result;
	}

	/**
	 * Gets and puts the logged in account's application PDF in the response
	 * output stream.
	 * @return an empty string, the page should not chage.
	 */
	public String downloadApplicationPDF() {
		try {
			tryLogin();
		} catch (AuthenticationException ex) {
			Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
			return handleException(ex);
		}
		
		try (ApplicationPDF applPdf = controller.getApplicationPDF(account))
		{
			FacesContext fc = FacesContext.getCurrentInstance();
			ExternalContext ec = fc.getExternalContext();

			/* Some JSF component library or some Filter might have set some
			 *headers in the buffer beforehand. We want to get rid of them,
			 * else it may collide.
			 */
			ec.responseReset();
			// Set content type to PDF file
			ec.setResponseContentType("application/pdf");
			// Specify filename
			ec.setResponseHeader("Content-Disposition", "attachment; filename=\""
					+ account.getFirstName() + "-" + account.getLastName()
					+ "_" + account.getApplication().getTimeOfRegistration().toString().replace(':', '-').replace(' ', '_')
					+ ".pdf\"");

			// Write pdf to response stream
			applPdf.save(ec.getResponseOutputStream());

			fc.responseComplete();
		}
		catch (Throwable ex) {
			Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
			return handleException(ex);
		}
		
		return "";
	}
	
	/**
	 * Retrieves all available competences.
	 * 
	 * @return a list of all competences.
	 */
	public List<Competence> getAllCompetences() {
		return controller.getAllCompetences();
	}
	
	private String handleException(Throwable ex) {
		String errorMessage = "";
		if (ex instanceof EntityExistsException) {
			formMessage = ex.getMessage();
		}
		else if(ex instanceof AuthenticationException) {
			formMessage = "You are not logged in!";
		}
		else if(ex instanceof ParseException) {
			formMessage = "Wrong date format";
		}
		else {
			errorMessage = "unhandledError";
		}

		return errorMessage;
	}

	/**
	 * Returns the latest message generated by the input form.
	 *
	 * @return the registration message.
	 */
	public String getFormMessage() {
		return formMessage;
	}
	
	/**
	 * Returns the current account 
	 *
	 * @return the registration message.
	 */
	public AccountDTO getAccount() {
		return account;
	}
	
	private void tryLogin() throws AuthenticationException {
		if (account == null) {
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String currentUser = facesContext.getExternalContext().getRemoteUser();
			if (currentUser != null) {
				account = controller.retrieveAccount(currentUser);
			} else {
				throw new AuthenticationException("Could not get current user");
			}
		}
	}
}
